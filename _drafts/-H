\#\# Using the American keyboard layout When writing some sort of
computer code, the American keyboard layout is more convenient than the
Swedish one I had learned to use since most of the meta characters,
\`\\\` and \`{\`, for instance, is more readily available. These are
direct keypresses on the American layiout whereas they require
combinations with the ALT-key in the Swedish layout. For writing LaTeX
this makes things a lot easier since you need these particular
characters also for declarations incorporated in the prose text. Since
most of the things I wrote at the time were in English anyways and I
didn't need the \`å\`, \`ä\`, and \`ö\` made accessible the Swedish
layout, I used the American layout more or less permanently. ![American
keyboard layout](/images/kblayoutusa.png) ![Swedish keyboard
layout](/images/kblayoutswe.png) \#\# Switches to (bad) Swedish layout
Now, every now and again I need to write something in Swedish. The
common way of doing this - and the way I did it for a while - was to use
the keyboard layout switching of the operating system. This can be set
to switch between the two layouts above and it can be mapped to some
easily accessed key combination. I have it set to COMMAND-SPACE. This is
quite convenient, especially since it works in most applications. The
problem with this is that the Swedish keyboard layout not only adds the
three Swedish characters relative to the American layout, it also moves
a whole bunch characters around, including \`?\`, \`:\`, \`;\`, \`-\`,
\`"\`, \`&\`, \`\*\`, \`\\\`, \`/\`, \`\`\`\`\`, and all three pairs of
brackets (\`[\`, \`(\`, \`{\`). So if you are used to the position of
the posititioning of these characters in the American layout, things get
very confusing, even when writing normal prose. \#\# Swedish in Vim A
solution in Vim to this problem is to configure a pseudo-Swedish
keyboard layout that only adds the \`å\`, \`ä\`, and \`ö\` without
moving other characters around. Adding these keyes according to their
normal mappings in the Swedish layout to the American layout covers some
characters however. More specifically: ---- ------- ---- \`å\` covers
\`[\` \`Å\` covers \`{\` \`ä\` covers \`'\` \`Ä\` covers \`"\` \`ö\`
covers \`;\` \`Ö\` covers \`:\` Mapping these covered characters to
other physical keys on the keyboard is utterly annoying if your are
often switching between layouts. Instead, I opted to have the covered
keyes with double keypresses, so that pressing \`åå\` produces \`[\`,
\`ÅÅ\` prudeces \`{\`, etc. Luckily, in Swedish you never type. This, I
believe, is a much smaller adaptation of the American layut, that
remapping them to other keyes and a lot easier to get used to. Switching
from the American layout, which is superior if programming is involved
due to nonalphabetical characters being more accassable, to a layout
including Swedish characters thus requires a minimal layout change, and
no relearning of keyposition, and no relearning of key positions. This
setup is accomplished by having the folling in the \`.vimrc\`. This code
maps the pseudo-Swedish layout described above to \`\\s\` (or whatever
you have the leader key set to). \`\\e\` switches back to American
layout, basically by re- and undoing the Swedish mappings. The switches
also changes the language of the spell checker according to the language
you are writing in. Note that the code below also remaps the \`r\`
operation to work as expected with the appropriate keyes.[\^1] [\^1]:
\`\`\` vim " Switch to Swedish function! SweType() set spelllang=sv
inoremap ; ö nnoremap r; rö inoremap ;; ; nnoremap r;; r; inoremap : Ö
nnoremap r: rÖ inoremap :: : nnoremap r:: r: inoremap [ å nnoremap r[ rå
inoremap { Å nnoremap r{ rÅ inoremap ' ä nnoremap r' rä inoremap '' '
nnoremap r'' r' inoremap " Ä nnoremap r" rÄ inoremap "" " nnoremap r""
r" inoremap [[ [ nnoremap r[[ r[ inoremap {{ { nnoremap r{{ r{
endfunction nmap s :call SweType() " Switch to English function!
EngType() set spelllang=en\_us inoremap ; ; unmap r; iunmap ;; unmap r;;
inoremap : : unmap r: iunmap :: unmap r:: inoremap [ [ unmap r[ iunmap
[[ unmap r[[ inoremap { { unmap r{ iunmap {{ unmap r{{ inoremap ' '
unmap r' iunmap '' unmap r'' inoremap " " unmap r" iunmap "" unmap r""
endfunction nmap e :call EngType() \`\`\`
