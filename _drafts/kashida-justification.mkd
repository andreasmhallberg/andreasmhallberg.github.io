---
layout: post
title: Stretchable kashida justification in LaTeX
permalink: /stretchale-kashida-justification/
language: English
length: long
tags:
- arabic
- latex
- typography
---


This post describes how to make stretchable pseudo-*kashidas* and how to automatically apply it to justify Arabic text typeset with LaTeX and the XeTeX engine. The method utilizes the `\XeTeXcharclass` function in XeTeX to insert a stretchable rule between connecting characters. The thickness of this rule defined to match the thickness of the *kashida* character\ (ـ) in the chosen typeface. 

## Introduction

A paragraph with even left and right margins is said to be *justified*. Of course. In texts in the Latin alphabet, this is achieved in two ways: a)\ by hyphenating long words where they appear at the end of a line, and b)\ by varying the space between words.[^microtype] In the Arabic script  there is no hyphenation, words cannot be broken up in two, making the justification of paragraphs more difficult.

What Arabic has, though, that the Latin script lacks, is the ability stretch out the connecting lines between letters. In typed text, this is done with a character called *kashida* (`U+0640`). It is a line at the baseline, similar in shape to the underscore, and it connects to adjacent letter. The word كبير (*kabīr* 'big'), for instance, could be written with a few kashidas to make it take up more space (كبيـــــر), which can be used justify the text.

There are two problems with this. Firstly, any line can only be lengthened by a multiple of the width of the kashida in the typeface. For example, if the kashida is 5\ pts wide, the line could be lengthened by 5\ pts by adding a kashida somewhere, or by 10\ pts by adding two. But it could not be lengthened by 7\ pts. Secondly, the lengthening can only be applied point wise certain words on the line and cannot be distributed evenly across the line, making for an uneven appearance of the words in line.

Se for example the excerpt below from the novel *Yūtūbiyā* by Aḥmad Xālid Tawfīq.[^utopia]. Kashidas have been added to the last couple of words at the end of most lines to fill them up to the left margin. This makes for an unattractive and uneven page.

![Page 12 from *Yūtūbiyā*, where kashidas are used in words at the end of the line to fill it.](images/2017-02-28/utopia.pdf)

## Solution - the stretchable kashida

One solution to this is to use a stretchable kashida that is placed between all connecting characters. It just so happens that TeX provides to do this fairly easily and reliably. If no stretching is needed to justify the text it gets a width of zero mending that it does not appear at all. If some filling is needed to fill the line (which in practice will virtually always be the case), then all these stretchable kashidas are stretched with an equal amount to fill the line. There is thus no fixed or even default width of this kashida, it will be as long or short as it needs be, and all stretchable kashidas on the same line will be of the same width.

Have a look at the page below. It contains the same three paragraphs, taken at random from an Arabic news site, typeset three times, first in three columns, then in four, and then in five columns. The more columns, and thus the narrower the columns, the more difficult it is fore the typesetting engine to find a good way of distributing words on the lines to avoid big white spaces between words. In the last part with five columns, the text looks really bad, with large white blobs scattered all over surface of the text.  

![Example text without stretchable kashida.](images/2017-02-28/no-kashida.pdf)


Now compare this with the following page. Here the same text is set with the same font, font size and columns, but with a stretchable kashida at every letter connection. Note the total lack of white blobs. The stretchable kashida nicely fills every line, producing an even surface.

**NOTE:** When viewed on screen, the inserted stretchable kashida may appear choppy in certain resolutions. This is because it has not been adapted for screen display in various resolutions, as has the rest of the font. Zoom in on the pdf-image and you will see that the choppiness disappears. It will also not be an issue when printed.

![Example text with stretchable kashida.](images/2017-02-28/kashida.pdf)

## Application

The rest of this post is step wise an explanation of the LaTeX code that achieves this result. A complete self-contained example (used to produce the documents above) can be found in [this GitHub repo](https://github.com/andreasmhallberg/kashida-justification).

First we load the packages that we need and setup the Arabic font. Lateef is a free and open source font available [here](https://www.sil.org/resources/software_fonts/lateef).  

``` tex
\documentclass{article}
\usepackage{calc} % used to measure kashida thickness
\usepackage{polyglossia}
\setmainlanguage{arabic}
\newfontfamily\arabicfont[Script=Arabic]{Lateef} 
```


### XeTeXinterchartoks 

Then we activate the `XeTeXinterchartoks` feature, declare the different classes, and assign characters to the different classes. This allows us to automatically insert a command between combinations of characters of each class. Each class is assigned with characters with a specific set of connecting rules, i.e. those that connect to the following letter and those that do not. So between all connectors we want to insert the command for the stretchable kashida, also when a connector is followed by a non-connector, but not after a non-connector. We also need special classes for the letters *lām*\ (ل) and *alif* (ا, in all its variants)  since we do not want to insert anything between them when they appear in this order, which would break the compulsory ligature\ لا. Similar excepting for other ligatures in particular fonts could easily be added this way, otherwise the ligatures will simply connect at the baseline as normal when this code is applied.   

``` tex
\XeTeXinterchartokenstate=1

\newXeTeXintercharclass\confb % connect back
\newXeTeXintercharclass\conb  % connect front back
\newXeTeXintercharclass\alif  % alif
\newXeTeXintercharclass\lam   % lam

\XeTeXcharclass `\ي=\confb 
\XeTeXcharclass `\ئ=\confb
\XeTeXcharclass `\ه=\confb
\XeTeXcharclass `\ش=\confb
\XeTeXcharclass `\س=\confb
\XeTeXcharclass `\ق=\confb
\XeTeXcharclass `\ف=\confb
\XeTeXcharclass `\غ=\confb
\XeTeXcharclass `\ع=\confb
\XeTeXcharclass `\ض=\confb
\XeTeXcharclass `\ص=\confb
\XeTeXcharclass `\ن=\confb
\XeTeXcharclass `\م=\confb
\XeTeXcharclass `\ك=\confb
\XeTeXcharclass `\ظ=\confb
\XeTeXcharclass `\ط=\confb
\XeTeXcharclass `\خ=\confb
\XeTeXcharclass `\ح=\confb
\XeTeXcharclass `\ج=\confb
\XeTeXcharclass `\ث=\confb
\XeTeXcharclass `\ت=\confb
\XeTeXcharclass `\ب=\confb

\XeTeXcharclass `\ل=\lam

\XeTeXcharclass `\ا=\alif
\XeTeXcharclass `\أ=\alif
\XeTeXcharclass `\إ=\alif
\XeTeXcharclass `\آ=\alif

\XeTeXcharclass `\و=\conb
\XeTeXcharclass `\ؤ=\conb
\XeTeXcharclass `\ذ=\conb
\XeTeXcharclass `\د=\conb
\XeTeXcharclass `\ز=\conb
\XeTeXcharclass `\ر=\conb
\XeTeXcharclass `\ة=\conb
```

Then we declare the combinations of character classes between which we want to insert the command for the stretchable kashida (which we have yet to define). The order is significant. Note that all possible combination of characters classes where you want stretchable kashida must be added to the list.

``` tex
 \XeTeXinterchartoks \confb \confb = {\kashida{}}
 \XeTeXinterchartoks \lam \lam     = {\kashida{}}
 \XeTeXinterchartoks \confb \alif  = {\kashida{}}
 \XeTeXinterchartoks \confb \lam   = {\kashida{}}
 \XeTeXinterchartoks \lam \confb   = {\kashida{}}
 \XeTeXinterchartoks \lam \conb    = {\kashida{}}
 \XeTeXinterchartoks \confb \conb  = {\kashida{}}
```

### Measuring the kashida

The following snippet uses functions form the `calc` package to measures the thickness of the kashida in the loaded font. It masers the top of the kashida from the baseline and stores this value in `\kashidaheight`. It also measure how far it extends below the baseline and stores the value in `\kashidadepth`. (None of the fonts I have tested this on have a kashida that extends below the baseline, so this measure will normally be `0 pts`.)



``` tex
\newlength\kashidaheight
\setlength\kashidaheight{\heightof{\textarabic{ـ}}}
\newlength\kashidadepth
\setlength\kashidadepth{\depthof{\textarabic{ـ}}}
```

This means that this method does not work for typefaces in which the letter connection is raised above the baseline, as in Geeza Pro that is included in OSX. Or rather, the code will work, but it will not be pretty. (Fixing this would not be too difficult, but it would require some extra tweaking.) The method presented here will work fine with most simple *nasx* typefaces, however, such as 
[Lateef](https://www.sil.org/resources/software_fonts/lateef), 
[Scheherazadw](http://software.sil.org/scheherazade/),
and [Simplified Arabic](https://www.microsoft.com/typography/fonts/family.aspx?FID=261) (distributed with MS Word), as well as with any mono-spaced Arabic font. 

Note also that these measurements will change any time the font size changes, so that the above command should be run again after any font size command such `\large`. 

### Defining the kashida command

With the measurements of the kashida now stored, we can use this when it now comes to define the actual stretchable kashida that is to go between all connecting characters.

``` tex
\newcommand\kashida[1]{\char"200D
  \nobreak\leaders
    \hrule height \kashidaheight depth \kashidadepth
    \hskip 0pt plus 100 pt
  \nobreak\char"200D}
```

This is essentially a leader, such as the row of dots that fill the line  between a chapter title and the page number in a table of contents, but in the form of a solid line of kashida-thickness.

Note that the command begins and ends with `\char"200D`. This inserts the Unicode character `ZERO WIDTH JOINDER` which is very useful when working with Arabic. As its name suggest, it takes no space and only instructs surrounding letters to connect with it. Without it the text engine would see the command `\nobreak` when it comes to this command, and not a letter with which it can connect the previous one. `\nobreak` instructs LaTeX not to have any line breaks here.

The heart of the command is `\leaders` which is a stretchable element, here declared in plain TeX. It takes two parameters:

a) what it is that is to be repeated or stretched, here a horizontal rule (`\hrule`) with the height stored in `\kashidaheight` and the depth stored in `\kashidadepth`
b) the stretchability ('glue' in TeX-terminology), here it is set to be able to stretch from 0 to 100\ pts.

It is important that the stretchability is set to limited dimension such as 100\ pts and not to infinite stretchability with `fill`, because this will mess up the last line of the paragraph that does not have to be filled. 

## Conclusion
And that's it. Adding the above code to the preamble automatically applies the stretchable kashida as in the multicolumn examples above.

The way this has been applied here comes with a few caveats:

- Only works with typefaces where letters are connected at the baseline.
- If the typeface have ligatures other than *lam-alif* and that you wish to retain, they must be added to the classes and patters of `XeTeXinterchartoks`.
- In its current version, vowel signs negate the stretchable kashida.


[^microtype]: There is also a third method; to strewth or letters by a small percentage so that it is not perceptible on individual letters, but with an accumulative effect that provides variability that is used for justifying the text. See the documentation for the [`mycrotype` package](https://www.ctan.org/pkg/microtype?lang=en) for a discussion and implementation in LaTeX.
[^utopa]: أحمد خالد توفيق، ٢٠١٤. *يوتوبيا*، دير ميريت، القاهرة. 
