---
layout: post
title: Typing Arabic in Vim 
permalink: /typing-arabic-in-vim/
language: English
lang: en
tags:
- vim
- arabic
---

![LTR display in Vim](typing-arabic-in-vim/rtl.tiff)

[//]: # (
> from left to right  
> Hello!  
> من السيار إلى اليمين
> مرحبا
)

## Introduction

I often write documents that contain both Latin and Arabic script, often on the same line of text. Most often this is the case in exams and lecture notes. This can be challenging due to the complications of mixing of LTR (left-to-right) and RTL (right-to-left) script. These seems like an easy problem to solve for software developers, and it is, only not in software with graphical WYSIWYG interfaces, such as Word of OpenOffice. (I'm sure everyone who has tried writing mixed direction text in such software share my frustration with them, and I will therefore refrain from rants.) Since my shift to exclusively producing and editing text in plain text formats (.txt, .mkd, .csv, etc.) with the editor Vim, writing texts with mixed directionlity has become a lot easier. In this post I explain how. 

When typing and editing on the computer, switching from Latin to Arabic script involves changing two basic things: changing the direction in which characters appear and changing the keyboard layout to produce a different character set. In Vim, each of these two changes is done  indecently with the options  `rightleft` for directionality and `keymap` for the keyboard layout. In the following I discuss each one of them in turn and how I use them.

# Directionlaity and display

It is important to understand that when text is stored electronically is is represented by series of characters, including spaces and line breaks, order one after another in a long list. Think of this as the order they are typed. Some of these characters come with information that they are to be displayed LTR and others RTL, but it doesn't effect the order in which they are stored in file. Thus if i type `hello` the letters are stored in that particular order, and it can be displayed as LTR (`hello`) or as RTL (`olleh`) with the characters in the same order, only the direction the are displayed in has changed. In English, of course, the former is appropriate. If i type the letters `م``ر``ح``ب``ا`, they can be displayed as RTL (`ابحرم`) or as LTR (`مرحبا`) with the characters in same order but with different direction of display. For Arabic, the latter is appropriate.

Now, what WYSIWYG word processors do is that when they come across characters in the file that are part of an alphabet that is written from right to left, it rearranges them so that they are displayed RTL on the screen. This is of course nice in that it shows the text as it is intended to be read by humans. However, try to highlight a portion of a text with mixed directionlity (or even with only LTR) with the mouse, add a at a direction switch, enclose a single LTR word in parenthesis, and you are likely to run into trouble. Editing a text displayed like this is a pain.

Enter Vim. Vim lacks the capability of visually reordering specific letters according to the reading direction of that particular alphabet. All characters are displayed in a logical order, either LTR or RTL, as in the image in the image below introduction to this post. In the left hand with RTL display, the text in English is be displayed correctly and Arabic text reversed. In the right hand image, the text in English is be displayed reversed and Arabic text is displayed correctly.

![RTL display](typing-arabic-in-vim/ltr.tiff) ![LTR display](typing-arabic-in-vim/rtl.tiff)


You switch between these two ways of displaying a text with `:set rightleft` for RTL `:set norightleft` for LTR. I have this mapped to `\a` to quickly switch back and forth. (This mapping also switches to Arabic keyboard layout, as explained below.) Thus, writing documents with mixed Latin/Arabic script becomes a process of quickly reorienting the entire text back and forth between the two modes exemplified above whenever you want to switch between editing or typing a word or section of the text in Arabic or Latin script.

The drawback of this method is that it is a bit disorienting. It is more difficult to navigate the using its visual properties on the screen since it changes so radically. The gains, as compared to WYSIWYG word processors, are however tremendous. Editing, marking, copying, and moving around in the Arabic text becomes completely painless. You can edit an change stuff as easily as you would any Latin-character text.

# Keymap

Vim also comes with its keyboard layout for Arabic. You switch to it with `:set keymap=arabic`. (This is done independently of the writing/display direction discussed above. If you change the `keymap` option and not `rightleft` you will type Arabic characters, but from left to right.) Using Vim's internal keymaps (see `:h mbyte-keymap`) is preferable to using the keyboard layout switching of the OS. Of you use the OS keyboard switch, normal mode commands no longer works, and all of Vim's core functionality is lost. Vim's internal keymap switching only applies to insert mode, search, and the like, while normal mode is unaffected, so that all your Vim muscle memory can do its thing.

Another advantage with Vim's keymap is that it is very simple to edit. It consists of two columns, the first containing the input key and the second the Unicode character is is mapped to: 

``` vim
loadkeymap
q	<char-0x0636>	" (1590)	- DAD
w	<char-0x0635>	" (1589)	- SAD
e	<char-0x062b>	" (1579)	- THEH
r	<char-0x0642>	" (1602)	- QAF
[...]
```

I am used to having the letter *dhaal*\ (ذ) on the §-key on the top right of the keyboard, as in PC-machines, but in Vim's Arabic key mapping it is on the \`-key next to the left shift. To change this I copied the original Arabic keymap file (I&nbsp;se MacVim so this file is locate in `/Applications/MacVim.app/Contents/Resources/vim/runtime/keymap/arabic_utf-8.vim`) to `~/.vim/keymap/` and changed its name to `arabic-pc_utf-8.vim`. The file name is arbitrary, accept that it must end with `_utf-8.vim`. In the new file I make the change change the key input that produces the letter *dhāl* from `\`` to `§` (line&nbsp;54).

I can now call this new kemap with `:set keymap=arabic-pc` (the firs part of the file name for the keymap). You could also change the original file, but this method of making a copy and modifying it is better since you can store it separately and make it more easy accessible for different Vim installations. My slightly modified Arabic keymap file can for instance be found [here](https://github.com/andreasmhallberg/dotfiles).

If you only type some isolated Arabic words here and there, it easiest only to change the keymapping without changing the text direction. The Arabic words will look strange on the screen, ordered from left to right and connected as such. But they are still more or less readable, and for a few isolated words this is not too big of a deal.

## Language switching command

If you are often switching back and forth between English (or some other language that uses Latin script) and Arabic, it is a good idea to map to a key command a function that changes to RTL directionality and the Arabic keyboard layout, and then back. I have this set to `\a` for Arabic and `\e` for English using the code below (adapted from [my vimrc](https://github.com/andreasmhallberg/dotfiles/blob/master/.vimrc)).

``` vim
" Switch to English - mapping
nmap <Leader>e :<C-U>call EngType()<CR>
" Switch to Arabic - mapping
nmap <Leader>a :<C-U>call AraType()<CR>

" Switch to English - function
function! EngType()
" To switch back from Arabic
  set keymap= " Restore default (US) keyboard layout
  set norightleft
endfunction

" Switch to Arabic - function
function! AraType()
    set keymap=arabic-pc "Modified keymap. File in .vim/keymap
    set rightleft
endfunction
```
